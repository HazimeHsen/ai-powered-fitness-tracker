generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String            @id @default(cuid())
  email         String            @unique
  name          String?           // Temporary field for NextAuth compatibility
  password      String?           // For email/password authentication
  image         String?
  emailVerified DateTime?
  profileCompleted Boolean        @default(false)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Profile fields
  heightCm      Int?
  weightKg      Float?
  sex           String?
  birthDate     DateTime?
  fitnessLevel  String?

  // Goals and equipment (stored as JSON strings)
  primaryGoal   String?
  secondaryGoals String? // JSON array as string
  equipment     String? // JSON array as string

  // Relations
  preferences   Preferences?
  dietaryInfos  DietaryInfo[]

  // Exercises and workouts
  savedExercises SavedExercise[]
  workoutTemplates WorkoutTemplate[]
  workoutLogs    WorkoutLog[]
  progressLogs   ProgressLog[]
  nutritionLogs  NutritionLog[]

  // NextAuth relations
  accounts      Account[]
  sessions      Session[]

  @@index([email])
}

// NextAuth adapter models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refresh_token")
  access_token      String?  @map("access_token")
  expires_at        Int?     @map("expires_at")
  token_type        String?  @map("token_type")
  scope             String?
  id_token          String?  @map("id_token")
  session_state     String?  @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Preferences {
  id             String  @id @default(cuid())
  userId         String  @unique
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  units          String  @default("metric") // metric | imperial
  notifications  Boolean @default(true)
  trainingSplit  String?
}


model DietaryInfo {
  id           String  @id @default(cuid())
  userId       String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  dietaryType  String? // e.g., vegan, vegetarian, keto
  allergies    String? // comma-separated or JSON
  dislikes     String?

  @@index([userId])
}

// Exercise data cached from API
model Exercise {
  id           String   @id // Keep API id as primary key to avoid duplicates
  name         String
  gifUrl       String?
  bodyPart     String?
  equipment    String?
  target       String?
  instructions String?

  templateExercises TemplateExercise[]
  loggedExercises   LoggedExercise[]

  @@index([name])
  @@index([bodyPart])
  @@index([equipment])
  @@index([target])
  SavedExercise SavedExercise[]
}

model SavedExercise {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([userId, exerciseId])
  @@index([userId])
}

model WorkoutTemplate {
  id          String            @id @default(cuid())
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  exercises   TemplateExercise[]

  @@index([userId])
  WorkoutLog WorkoutLog[]
}

model TemplateExercise {
  id               String          @id @default(cuid())
  templateId       String
  template         WorkoutTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  exerciseId       String
  exercise         Exercise        @relation(fields: [exerciseId], references: [id])
  orderIndex       Int             @default(0)
  sets             Int             @default(3)
  reps             Int             @default(10)
  restSeconds      Int             @default(60)

  @@index([templateId])
}

model WorkoutLog {
  id           String          @id @default(cuid())
  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  date         DateTime        @default(now())
  templateId   String?
  template     WorkoutTemplate? @relation(fields: [templateId], references: [id])
  notes        String?

  loggedExercises LoggedExercise[]

  @@index([userId])
  @@index([userId, date])
}

model LoggedExercise {
  id            String      @id @default(cuid())
  workoutLogId  String
  workoutLog    WorkoutLog  @relation(fields: [workoutLogId], references: [id], onDelete: Cascade)
  exerciseId    String
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  orderIndex    Int         @default(0)

  sets          LoggedSet[]

  @@index([workoutLogId])
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExerciseId String
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
  setNumber        Int
  reps             Int
  weight           Float?
  notes            String?
}

model ProgressLog {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date         DateTime @default(now())
  weightKg     Float?
  chestCm      Float?
  waistCm      Float?
  hipsCm       Float?
  armCm        Float?
  thighCm      Float?
  photoUrl     String?

  @@index([userId])
  @@index([userId, date])
}

model NutritionLog {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date         DateTime @default(now())
  calories     Int      @default(0)
  proteinGrams Int      @default(0)
  carbsGrams   Int      @default(0)
  fatsGrams    Int      @default(0)
  notes        String?

  @@unique([userId, date])
  @@index([userId])
  @@index([userId, date])
}


